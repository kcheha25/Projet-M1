# Calcul des ratios NP/total et de l'axe y pour chaque groupe
def calculate_plot_ratios(diameters_by_prefix):
    x_values, y_values = [], []
    
    for prefix, diameters in diameters_by_prefix.items():
        freqs = normalize_counts(diameters)  # Fréquences normalisées par aire
        
        # Ratio NP / total pour les objets > 0.5 nm
        index_above_05 = diameter_bins[:-1] > 0.5
        NP_total_ratio = np.sum(freqs[index_above_05]) / np.sum(freqs)
        
        # Nouvelle approche pour calculer y en gardant le résultat entre 0 et 1
        freqs_above_05 = freqs[index_above_05]
        if len(freqs_above_05) > 0:
            median_diam_above_05 = np.median(diameter_bins[1:][index_above_05])
            y_value = np.sum(freqs_above_05) / median_diam_above_05
            y_value = min(1, y_value)  # Contraindre entre 0 et 1
        else:
            y_value = 0
        
        x_values.append(NP_total_ratio)
        y_values.append(y_value)
    
    return x_values, y_values
