import matplotlib.pyplot as plt
import numpy as np
import os

image_files = [...]  # Remplace par ta liste de noms d'images

surfaces_pred_dict = {}
surfaces_gt_dict = {}

for i, (surfaces_pred, surfaces_gt) in enumerate(zip(test_masks_pred, test_masks_gt)):
    prefix = os.path.basename(image_files[i])[:6]
    if prefix not in surfaces_pred_dict:
        surfaces_pred_dict[prefix] = []
    if prefix not in surfaces_gt_dict:
        surfaces_gt_dict[prefix] = []

    surfaces_pred_dict[prefix].extend(surfaces_pred)
    surfaces_gt_dict[prefix].extend(surfaces_gt)

surface_bins = np.arange(0.1, 1.3, 0.1)
colors = plt.cm.viridis(np.linspace(0, 1, len(surfaces_pred_dict)))

plt.figure(figsize=(12, 6))

for i, prefix in enumerate(surfaces_pred_dict.keys()):
    counts_pred, bins_pred = np.histogram(surfaces_pred_dict[prefix], bins=surface_bins)
    freqs_pred = counts_pred / np.sum(counts_pred) if np.sum(counts_pred) > 0 else np.zeros_like(counts_pred)
    plt.bar(bins_pred[:-1] + i * 0.02, freqs_pred, width=0.02, color=colors[i], alpha=0.7, label=f'Pred: {prefix}')

    counts_gt, bins_gt = np.histogram(surfaces_gt_dict[prefix], bins=surface_bins)
    freqs_gt = counts_gt / np.sum(counts_gt) if np.sum(counts_gt) > 0 else np.zeros_like(counts_gt)
    plt.bar(bins_gt[:-1] + i * 0.02 + 0.1, freqs_gt, width=0.02, color=colors[i], alpha=0.7, label=f'GT: {prefix}', hatch='//')

plt.title("Diagrammes des surfaces - Prédit et Ground Truth")
plt.xlabel("Surface (nm)")
plt.ylabel("Fréquence normalisée (0-1)")
plt.legend()
plt.tight_layout()
plt.show()
