import os
import numpy as np
import matplotlib.pyplot as plt
from skimage import measure, io
from scipy import ndimage
from tensorflow.keras.models import load_model

model = load_model("unet_membrane.hdf5")
image_dir = "path/to/test_images"
gt_mask_dir = "path/to/ground_truth_masks"

def calculate_properties(mask):
    labeled_mask, num_features = ndimage.label(mask)
    regions = measure.regionprops(labeled_mask)
    areas = [region.area for region in regions]
    diameters = [np.sqrt(area / np.pi) * 2 for area in areas]
    return areas, diameters

results_pred = {}
results_gt = {}

image_files = sorted(os.listdir(image_dir))
gt_files = sorted(os.listdir(gt_mask_dir))

for image_file, gt_file in zip(image_files, gt_files):
    image = io.imread(os.path.join(image_dir, image_file))
    gt_mask = io.imread(os.path.join(gt_mask_dir, gt_file))
    image_input = np.expand_dims(image, axis=0)
    pred_mask = model.predict(image_input)
    pred_mask = pred_mask.squeeze()
    pred_mask_bin = (pred_mask > 0.5).astype(np.uint8)
    gt_mask_bin = (gt_mask > 0.5).astype(np.uint8)
    
    areas_pred, diameters_pred = calculate_properties(pred_mask_bin)
    areas_gt, diameters_gt = calculate_properties(gt_mask_bin)
    
    prefix = image_file[:6]
    
    if prefix not in results_pred:
        results_pred[prefix] = {'isolated_atoms_freq': 0, 'clusters_freq': 0, 'nanoparticles_freq': 0, 'weighted_mean_diameter': 0}
    
    freq_isolated_atoms = 0
    freq_clusters = 0
    freq_nanoparticles = 0
    weighted_sum = 0

    for d in diameters_pred:
        if d < 0.2:
            freq_isolated_atoms += 1
        elif 0.2 <= d <= 0.5:
            freq_clusters += 1
        elif d > 0.5:
            freq_nanoparticles += 1
            weighted_sum += d

    results_pred[prefix]['isolated_atoms_freq'] = freq_isolated_atoms
    results_pred[prefix]['clusters_freq'] = freq_clusters
    results_pred[prefix]['nanoparticles_freq'] = freq_nanoparticles

    if freq_nanoparticles > 0:
        results_pred[prefix]['weighted_mean_diameter'] = weighted_sum / freq_nanoparticles

x_values_pred = []
y_values_pred = []
x_values_gt = []
y_values_gt = []

symbols = ['o', 's', '^', 'D', 'P', '*', 'x', '+']
prefix_list = list(results_pred.keys())
prefix_symbol_map = {prefix: symbols[i % len(symbols)] for i, prefix in enumerate(prefix_list)}

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
for prefix in results_pred.keys():
    if results_pred[prefix]['isolated_atoms_freq'] > 0:
        x_value = results_pred[prefix]['nanoparticles_freq'] / results_pred[prefix]['isolated_atoms_freq']
        y_value = results_pred[prefix]['weighted_mean_diameter']
        plt.scatter(x_value, y_value, label=prefix,
                    marker=prefix_symbol_map[prefix], s=100)

plt.title("Diamètre moyen des NP - Masques Prédits")
plt.xlabel("Rapport de fréquences NP/atomes isolés")
plt.ylabel("Diamètre moyen des nanoparticules (nm)")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
for prefix in results_gt.keys():
    if results_gt[prefix]['isolated_atoms_freq'] > 0:
        x_value = results_gt[prefix]['nanoparticles_freq'] / results_gt[prefix]['isolated_atoms_freq']
        y_value = results_gt[prefix]['weighted_mean_diameter']
        plt.scatter(x_value, y_value, label=prefix,
                    marker=prefix_symbol_map[prefix], s=100)

plt.title("Diamètre moyen des NP - Ground Truth")
plt.xlabel("Rapport de fréquences NP/atomes isolés")
plt.ylabel("Diamètre moyen des nanoparticules (nm)")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
