def calculate_area(mask):
    num_objects, object_labels = cv2.connectedComponents(mask.astype(np.uint8))
    areas = []
    for obj in range(1, num_objects):
        area_pixels = np.sum(object_labels == obj)
        area_nm = area_pixels * (resolution_nm_per_pixel ** 2)
        areas.append(area_nm)
    return areas

def calculate_diameters(areas):
    diameters = []
    for area in areas:
        if area > 0:
            diameter = np.sqrt((4 * area) / np.pi)
            diameters.append(diameter)
    return diameters

def normalize_frequency(diameters):
    counts = np.bincount(np.round(diameters).astype(int))
    normalized_counts = counts / np.sum(counts) if np.sum(counts) > 0 else counts
    return normalized_counts

def plot_histogram(test_diameters, gt_diameters, prefix):
    fig, axs = plt.subplots(1, 2, figsize=(12, 6))
    normalized_test_freq = normalize_frequency(test_diameters)
    axs[0].bar(range(len(normalized_test_freq)), normalized_test_freq, color='blue', alpha=0.6)
    axs[0].set_title(f"Fréquence normalisée des diamètres (Prédictions) pour {prefix}")
    axs[0].set_xlabel("Diamètre (nm)")
    axs[0].set_ylabel("Fréquence normalisée")
    axs[0].set_ylim(0, 1)
    axs[0].set_xticks(np.arange(0, len(normalized_test_freq), step=1))

    normalized_gt_freq = normalize_frequency(gt_diameters)
    axs[1].bar(range(len(normalized_gt_freq)), normalized_gt_freq, color='orange', alpha=0.6)
    axs[1].set_title(f"Fréquence normalisée des diamètres (Vérité terrain) pour {prefix}")
    axs[1].set_xlabel("Diamètre (nm)")
    axs[1].set_ylabel("Fréquence normalisée")
    axs[1].set_ylim(0, 1)
    axs[1].set_xticks(np.arange(0, len(normalized_gt_freq), step=1))

    plt.tight_layout()
    plt.show()

predicted_areas_by_prefix = {}
gt_areas_by_prefix = {}

for image_file in sorted(os.listdir(image_dir)):
    prefix = image_file[:6]
    image = io.imread(os.path.join(image_dir, image_file))
    gt_file = image_file.replace('image', 'mask')
    gt_mask = io.imread(os.path.join(gt_mask_dir, gt_file))
    
    image_input = np.expand_dims(image, axis=0)
    pred_mask = model.predict(image_input)[0]

    pred_areas = calculate_area(pred_mask)
    gt_areas = calculate_area(gt_mask)
    
    pred_diameters = calculate_diameters(pred_areas)
    gt_diameters = calculate_diameters(gt_areas)
    
    if prefix not in predicted_areas_by_prefix:
        predicted_areas_by_prefix[prefix] = []
        gt_areas_by_prefix[prefix] = []
        
    predicted_areas_by_prefix[prefix].extend(pred_diameters)
    gt_areas_by_prefix[prefix].extend(gt_diameters)

for prefix in predicted_areas_by_prefix:
    plot_histogram(predicted_areas_by_prefix[prefix], gt_areas_by_prefix[prefix], prefix)